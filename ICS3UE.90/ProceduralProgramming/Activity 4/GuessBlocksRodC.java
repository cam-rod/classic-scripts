/**
 * This program selects 3 of 4 coloured blocks and requires the user to guess the colours in the correct order
 * 
 * @author Cameron Rodriguez
 * @version 1.0 07/15/17
 */

import javax.swing.*;
public class GuessBlocksRodC {
  
  /**
   * @param arga the command line arguments
   */
  public static void main(String[] args) { 
    //DECLARING VARIABLES
    int genOnce = 0; //Forces computer to only pick blocks once, maintains DIPO
    int compBlock1 = 99; //The first block generated by the computer (initialized to 99 for valid generation check)
    int compBlock2 = 100; //The second block generated by the computer (initialized to 100 for valid generation check)
    int compBlock3 = 101; //The third block generated by the computer (initialized to 101 for valid generation check)
    int blockNumber = 1; //Clarifies what block the user is entering
    int userBlock1, userBlock2, userBlock3; //The three blocks guessed by the user converted to integers
    int goodColour; //Holds how many colours the user guessed correctly
    int goodPlace; //Holds how many blocks the user guessed in order
    int retry = JOptionPane.YES_OPTION; //The variable that allow the user to retry if requested
    
    //Introduce game
    introGame();
    
    //Initializing retry loop
    do {
      //INPUT - User enters guesses
      userBlock1 = inputUserGuess(blockNumber); //First guess
      blockNumber++; //Will ask for guess #2
      userBlock2 = inputUserGuess(blockNumber); //Second guess
      blockNumber++; //Will ask for guess #3
      userBlock3 = inputUserGuess(blockNumber); //Third guess
      blockNumber = 1; //Resets number so still syncronized if user retries guesses
      //PROCESSING
      //Initializing generate blocks once loop (maintains DIPO)
      while (genOnce < 1) {
        //Generates 3 blocks
        compBlock1 = generateBlock(compBlock2, compBlock3);
        compBlock2 = generateBlock(compBlock1, compBlock3);
        compBlock3 = generateBlock(compBlock1, compBlock2);
        //Cancel computer block regeneration
        genOnce++;
      }
      //Checking colour guesses
      goodColour = checkColoursCorrect(compBlock1, compBlock2, compBlock3, userBlock1, userBlock2, userBlock3);
      
      //Checking correct order
      goodPlace = checkPositionsCorrect(compBlock1, compBlock2, compBlock3, userBlock1, userBlock2, userBlock3);
      
      //OUTPUT - Display results to user and offer retry if applicable
      retry = showResults(goodColour, goodPlace, userBlock1, userBlock2, userBlock3);
    }
    while (retry == JOptionPane.YES_OPTION);
    //Display closing message
    JOptionPane.showMessageDialog(null, "Thanks for playing. Goodbye!", "Goodbye", JOptionPane.PLAIN_MESSAGE);
  }
  
  /**
   * Introduces the game to the user
   */
  public static void introGame() {
    JOptionPane.showMessageDialog(null, "Welcome to Guess The Blocks!"
                                  + "\n\nIn this game, there are 4 different coloured blocks (Red, Green, Blue, and Yellow)."
                                  + "\nThe computer will select and hide 3 of those blocks from you. To win, you have to guess"
                                  + "\nwhich blocks are hidden AND what order they are in. Can you guess all 3 blocks correctly?"
                                  + "\nClick the button below to begin.", "Guess The Blocks", JOptionPane.INFORMATION_MESSAGE);
  }
  
  /**
   * Generates and returns the randomly selected blocks
   * 
   * @param checkBlock1 the first block to check against for repeats
   * @param checkBlock2 the second block to check against for repeats
   * @return the randomly generates block
   */
  public static int generateBlock(int checkBlock1, int checkBlock2) {
    int randBlock; //The randomly generated block
    do {
      randBlock = (int)(Math.random()*4);
    }
    while (randBlock == checkBlock1 || randBlock == checkBlock2); //Check if number generated is equal to other blocks
    //Red is 0, Green is 1, Blue is 2, Yellow is 3
    return (randBlock);
  }
  
  /**
   * Returns user guess for block
   * 
   * @param number the number of the block's position
   * @return the user's guess
   */
  public static int inputUserGuess(int number) {
    int userGuess; //The user's guess
    String[] options = {"Red", "Green", "Blue", "Yellow"};
    userGuess = JOptionPane.showOptionDialog(null, "Please select your guess for block #" + number + ":",
                                             "Enter Guess", JOptionPane.DEFAULT_OPTION,JOptionPane.QUESTION_MESSAGE,
                                             null, options, options[0]);
    // "Red" returned as 0, "Green" returned as 1, "Blue" as 2, "Yellow" as 3
    return (userGuess);
  }
  
  /**
   * Returns number of blocks guessed that matched computer's blocks
   * 
   * @param comp1 the computer's first block
   * @param comp2 the computer's second block
   * @param comp3 the computer's third block
   * @param user1 the user's first guess
   * @param user2 the user's second guess
   * @param user3 the user's third guess
   * @return the number of correctly guessed colours
   */
  public static int checkColoursCorrect(int comp1, int comp2, int comp3, int user1, int user2, int user3) {
    int correct = 0; //The number of correctly guessed colours
    /* The computer is not allowed to gerenate the same block twice, but a user can select the same block twice.
     * Comparing to the computer rather than the user prevents user input from modify correct colours output. */
    if (comp1 == user1 || comp1 == user2 || comp1 == user3) {
      correct++;
    }
    if (comp2 == user1 || comp2 == user2 || comp2 == user3) {
      correct++;
    }
    if (comp3 == user1 || comp3 == user2 || comp3 == user3) {
      correct++;
    }
    return (correct);
  }
  
  /**
   * Returns number of blocks guessed in the same order at the computer
   * 
   * @param comp1 the computer's first block
   * @param comp2 the computer's second block
   * @param comp3 the computer's third block
   * @param user1 the user's first guess
   * @param user2 the user's second guess
   * @param user3 the user;s third guess
   * @return the number of blocks guessed in the correct order
   */
  public static int checkPositionsCorrect(int comp1, int comp2, int comp3, int user1, int user2, int user3) {
    int correct = 0; //The number of blocks guessed in the correct order
    //Checking for correct positions
    if (user1 == comp1) {
      correct++;
    }
    if (user2 == comp2) {
      correct++;
    }
    if (user3 == comp3) {
      correct++;
    }
    return (correct);
  }
  
  /**
   * Displays results and returns request to retry game
   * 
   * @param colours the number of correctly guessed colours
   * @param places the number of blocks in the correct position
   * @param user1 the user's first guess
   * @param user2 the user's second guess
   * @param user3 the user's third guess
   * @return whether user would like to retry
   */
  public static int showResults(int colours, int places, int user1, int user2, int user3) {
    int retry = 99; //Whether user would like to retry guesses
    //Convert numbers of user's guesses to words
    String user1Text = convertNumToWord(user1);
    String user2Text = convertNumToWord(user2);
    String user3Text = convertNumToWord(user3);
    
    //Check if user successful
    if (colours == 3 && places == 3) {
      JOptionPane.showMessageDialog(null, "Congratulations! You correctly guessed the blocks' colour and order, which was"
                                    + "\n" + user1Text + ", " + user2Text + ", and " + user3Text + "!", "Correct Guess!",
                                    JOptionPane.PLAIN_MESSAGE);
      retry = JOptionPane.NO_OPTION;
    }
    else {
      Object[] failOptions = {"Yes", "No"};
      retry = JOptionPane.showOptionDialog(null, "Sorry, those guesses were incorrect."
                                   + "\nYour guesses: " + user1Text + "    " + user2Text + "    " + user3Text
                                   + "\nCorrectly guessed colours: " + colours
                                   + "\nBlocks guessed in correct order: " + places
                                   + "\n\nWould you like to try again?", "Incorrect Guess", JOptionPane.YES_NO_OPTION,
                                   JOptionPane.WARNING_MESSAGE, null, failOptions, failOptions[0]);
    }
    return (retry);
  }
  
  /**
   * Returns colour of representative number in String format
   * 
   * @param number the number representative of the colour
   * @return the colour
   */
  public static String convertNumToWord(int number) {
    String colour = "0"; //The colour text to be returned
    if (number == 0) {
      colour = "Red";
    }
    else if (number == 1) {
      colour = "Green";
    }
    else if (number == 2) {
      colour = "Blue";
    }
    else if (number == 3) {
      colour = "Yellow";
    }
    return (colour);
  }
} 